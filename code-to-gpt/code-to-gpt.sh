#!/bin/bash
# code-to-gpt.sh
# This script preps content to feed into a large language model.
# Read and print contents of text files in a directory, excluding specified directories and files

set -euo pipefail

# Usage function
usage() {
    echo "Usage: $0 [--count-tokens] [--exclude-dir <dir>] [--verbose] [--include-generated] [<directory>]"
    echo "  --count-tokens: Count tokens instead of outputting file contents"
    echo "  --exclude-dir <dir>: Exclude additional directory"
    echo "  --verbose: Enable verbose output"
    echo "  --include-generated: Include generated files (default: skip generated files)"
    echo "  <directory>: Specify the directory to process (default: current directory)"
    exit 1
}

DIRECTORY="." # directory to process
EXCLUDE_DIRS=("node_modules" "venv" ".venv" "dist") # directories to exclude
IGNORED_FILES=("go.sum" "go.work.sum" "yarn.lock" "yarn.error.log" "package-lock.json" "pnpm-lock.yaml") # files to ignore
COUNT_TOKENS=false
VERBOSE=false
SKIP_GENERATED=true

# Function to ensure tokencount is installed
ensure_tokencount() {
    if ! command -v tokencount &> /dev/null; then
        echo "tokencount not found. Attempting to install..."
        if ! command -v go &> /dev/null; then
            echo "Error: Go is not installed. Please install Go to use tokencount."
            exit 1
        fi
        go install github.com/tmc/tokencount@latest
        if ! command -v tokencount &> /dev/null; then
            echo "Error: Failed to install tokencount. Please install it manually."
            exit 1
        fi
        echo "tokencount installed successfully."
    fi
}

# Function to count tokens using tokencount
count_tokens() {
    local file="$1"
    tokencount "$file" 2>/dev/null || echo "0"
}

# Function to check if a file is generated
is_generated_file() {
    local file="$1"
    # Check for common generated file markers
    grep -q -E '(// Code generated .* DO NOT EDIT\.|@generated|# Generated by|# GENERATED FILE)' "$file"
}

# Process command line arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        --exclude-dir)
            EXCLUDE_DIRS+=("$2")
            shift 2
            ;;
        --count-tokens)
            COUNT_TOKENS=true
            shift
            ;;
        --verbose)
            VERBOSE=true
            shift
            ;;
        --include-generated)
            SKIP_GENERATED=false
            shift
            ;;
        -h|--help)
            usage
            ;;
        *)
            if [[ -d "$1" ]]; then
                DIRECTORY="$1"
                shift
            else
                echo "Unknown option or invalid directory: $1"
                usage
            fi
            ;;
    esac
done

# Ensure tokencount is installed if we're counting tokens
if [ "$COUNT_TOKENS" = true ]; then
    ensure_tokencount
fi

# Function to get files respecting Git ignore rules
get_files() {
    if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        # We're in a Git repository, use Git commands
        git ls-files --cached --others --exclude-standard
        git ls-files --others --exclude-standard
    else
        # We're not in a Git repository, fall back to find
        find "$DIRECTORY" -type f
    fi
}

# Process files
while IFS= read -r file; do
    # Check if the file is in an excluded directory
    skip=false
    for dir in "${EXCLUDE_DIRS[@]}"; do
        if [[ "$file" == *"/$dir/"* ]]; then
            [ "$VERBOSE" = true ] && echo "Skipping excluded directory: $file"
            skip=true
            break
        fi
    done
    [ "$skip" = true ] && continue

    # Check if the file is in the ignored files list
    filename=$(basename -- "$file")
    for ignored in "${IGNORED_FILES[@]}"; do
        if [[ "$filename" == "$ignored" ]]; then
            [ "$VERBOSE" = true ] && echo "Skipping ignored file: $file"
            skip=true
            break
        fi
    done
    [ "$skip" = true ] && continue

    # Check if the file is generated
    if [ "$SKIP_GENERATED" = true ] && is_generated_file "$file"; then
        [ "$VERBOSE" = true ] && echo "Skipping generated file: $file"
        continue
    fi

    # Process the file if it's a text file
    if [ "$VERBOSE" = true ]; then
        echo "File type for $file: $(file -- "$file")"
        echo "MIME type for $file: $(file -i -- "$file")"
    fi
    if [ -f "$file" ]; then
        file_type=$(file -b --mime-type "$file")
        if [[ "$file_type" == text/* ]] || [[ "$file_type" == application/x-empty ]] || [[ "$file_type" == inode/x-empty ]]; then
            if [ "$COUNT_TOKENS" = true ]; then
                token_count=$(count_tokens "$file")
                echo "$token_count $file"
            else
                echo "=== $file ==="
                cat "$file"
                echo ""
            fi
        elif [ "$VERBOSE" = true ]; then
            echo "Skipping non-text file: $file (MIME type: $file_type)"
        fi
    fi
done < <(get_files)

[ "$VERBOSE" = true ] && echo "Files found: $(get_files | wc -l)"

if [ "$COUNT_TOKENS" = false ]; then
    echo "=== END OF INPUT ==="
fi