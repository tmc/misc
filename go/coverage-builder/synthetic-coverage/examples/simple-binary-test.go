// simple-binary-test.go - Simple test to demonstrate binary injection
package main

import (
	"fmt"
	"log"
	"os"
	"os/exec"
	"path/filepath"
)

func main() {
	// Setup test directory
	testDir := "/tmp/simple-binary-test"
	os.RemoveAll(testDir)
	os.MkdirAll(testDir, 0755)

	// Create a simple Go app
	appDir := filepath.Join(testDir, "app")
	os.MkdirAll(appDir, 0755)

	// Create go.mod
	goMod := `module testapp
go 1.20`
	os.WriteFile(filepath.Join(appDir, "go.mod"), []byte(goMod), 0644)

	// Create main.go
	mainGo := `package main

import "fmt"

func main() {
    fmt.Println(Hello("World"))
}

func Hello(name string) string {
    if name == "" {
        return "Hello!"
    }
    return fmt.Sprintf("Hello, %s!", name)
}

func NotCovered() string {
    return "This won't be tested"
}`
	os.WriteFile(filepath.Join(appDir, "main.go"), []byte(mainGo), 0644)

	// Create test
	testGo := `package main

import "testing"

func TestHello(t *testing.T) {
    if Hello("World") != "Hello, World!" {
        t.Error("unexpected result")
    }
}`
	os.WriteFile(filepath.Join(appDir, "main_test.go"), []byte(testGo), 0644)

	// Step 1: Run with GOCOVERDIR
	fmt.Println("=== Step 1: Run tests with GOCOVERDIR ===")
	coverDir := filepath.Join(testDir, "coverage")
	os.MkdirAll(coverDir, 0755)

	cmd := exec.Command("go", "test", "-cover")
	cmd.Dir = appDir
	cmd.Env = append(os.Environ(), "GOCOVERDIR="+coverDir)
	if output, err := cmd.CombinedOutput(); err != nil {
		log.Printf("Test error: %v\n%s", err, output)
	} else {
		fmt.Printf("%s\n", output)
	}

	// Step 2: Show original coverage
	fmt.Println("\n=== Step 2: Original coverage ===")
	cmd = exec.Command("go", "tool", "covdata", "func", "-i="+coverDir)
	if output, err := cmd.Output(); err != nil {
		log.Printf("Error: %v", err)
	} else {
		fmt.Printf("%s", output)
	}

	// Step 3: Convert to text to see format
	fmt.Println("\n=== Step 3: Text format ===")
	txtFile := filepath.Join(testDir, "coverage.txt")
	cmd = exec.Command("go", "tool", "covdata", "textfmt", "-i="+coverDir, "-o="+txtFile)
	if err := cmd.Run(); err != nil {
		log.Printf("Error: %v", err)
	}
	content, _ := os.ReadFile(txtFile)
	fmt.Printf("%s\n", content)

	// Step 4: Build and run injection tool
	fmt.Println("\n=== Step 4: Build injection tool ===")
	toolPath := filepath.Join(testDir, "inject-tool")
	injectorSrc := filepath.Join(filepath.Dir(os.Args[0]), "gocoverdir-inject.go")
	
	cmd = exec.Command("go", "build", "-o", toolPath, injectorSrc)
	if err := cmd.Run(); err != nil {
		log.Fatalf("Failed to build injector: %v", err)
	}

	// Step 5: Inject synthetic coverage
	fmt.Println("\n=== Step 5: Inject synthetic coverage ===")
	synthDir := filepath.Join(testDir, "synthetic")
	os.MkdirAll(synthDir, 0755)

	cmd = exec.Command(toolPath,
		"-i", coverDir,
		"-o", synthDir,
		"-pkg", "testapp/generated",
		"-file", "generated.go",
		"-func", "AutoGenerated",
		"-line-start", "1",
		"-line-end", "50",
		"-statements", "25",
		"-executed", "1")
	
	if output, err := cmd.CombinedOutput(); err != nil {
		log.Fatalf("Injection failed: %v\n%s", err, output)
	} else {
		fmt.Printf("%s\n", output)
	}

	// Step 6: Show coverage with synthetic data
	fmt.Println("\n=== Step 6: Coverage with synthetic data ===")
	cmd = exec.Command("go", "tool", "covdata", "func", "-i="+synthDir)
	if output, err := cmd.Output(); err != nil {
		log.Printf("Error: %v", err)
	} else {
		fmt.Printf("%s", output)
	}

	// Step 7: Compare percentages
	fmt.Println("\n=== Step 7: Coverage comparison ===")
	fmt.Print("Original: ")
	cmd = exec.Command("go", "tool", "covdata", "percent", "-i="+coverDir)
	output, _ := cmd.Output()
	fmt.Printf("%s", output)

	fmt.Print("With synthetic: ")
	cmd = exec.Command("go", "tool", "covdata", "percent", "-i="+synthDir)
	output, _ = cmd.Output()
	fmt.Printf("%s", output)

	fmt.Printf("\nTest complete! Files in: %s\n", testDir)
}