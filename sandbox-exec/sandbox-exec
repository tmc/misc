#!/usr/bin/env bash
# sandbox-
# The current directory is mounted as /workspace in the container
# The container is named with a timestamp, and the name is added to a git note in the $NAMESPACE namespace.
# The container is retained by default, but can be removed with the --rm flag.
# If the --copy flag is passed, the entire workspace is copied to a temporary directory, which is added as a git remote

set -euo pipefail

repo_root=$(git rev-parse --show-toplevel 2>/dev/null)
if [ -z "$repo_root" ]; then
    echo "Error: Not in a git repository" >&2
    exit 1
fi

COPY=false
REMOVE_CONTAINER=false
NAMESPACE="sandbox-exec"
SANDBOX_DEPTH=${SANDBOX_DEPTH:-0}
SANDBOX_DEPTH=$((SANDBOX_DEPTH + 1))

usage() {
    echo "Usage: $0 [OPTIONS] [COMMAND]"
    echo "Options:"
    echo "  --copy              Create a temporary copy of the workspace"
    echo "  --rm                Remove the container after it exits"
    echo "  --namespace NAME    Use a custom namespace for git notes (default: sandbox-exec)"
    echo "  -h, --help          Show this help message"
    exit 0
}

while [[ $# -gt 0 ]]; do
    case "$1" in
        --copy)
            COPY=true
            shift
            ;;
        --rm)
            REMOVE_CONTAINER=true
            shift
            ;;
        --namespace)
            NAMESPACE="$2"
            shift 2
            ;;
        -h|--help)
            usage
            ;;
        *)
            break
            ;;
    esac
done

WS_ROOT=${WS_ROOT:-${repo_root}}
export DOTFILES_HOME=${DOTFILES_HOME:-$HOME}
export BASHRC_PATH=${BASHRC_PATH:-$DOTFILES_HOME/.bashrc}

# if we're in container already, use /workspace
# if [[ -f /.dockerenv ]]; then
# fi

current_path=$(pwd)
relative_path=${current_path#$repo_root/}

script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
dockerfile_path="$script_dir/.sandbox-exec.dockerfile"
dockerfile_context="$script_dir"

# use last 5 characters of the md5sum of the Dockerfile as the tag:
docker_tag="sandbox-exec:$(md5sum $dockerfile_path | cut -c-5)"

# if the tag isn't present, or if the FORCE_SANDBOX_EXEC_IMAGE_BUILD is set
if [ ! "$(docker images -q $docker_tag 2> /dev/null)" ] || [ ! -z "${FORCE_SANDBOX_EXEC_IMAGE_BUILD:-}" ]; then
    echo "Building Docker image..."
    if ! docker build -t "${docker_tag}" -f "$dockerfile_path" "$dockerfile_context"; then
        echo "Error: Failed to build Docker image" >&2
        exit 1
    fi
fi

container_name="${NAMESPACE}-d${SANDBOX_DEPTH}-$(date +%s)-$RANDOM"

if [ "$COPY" = true ]; then
    tmpdir=$(mktemp -d)
    cp -r "$WS_ROOT"/* "$tmpdir"
    WS_ROOT=$tmpdir
    git remote add $container_name "$WS_ROOT"
fi

git notes --ref="$NAMESPACE" append -m "$container_name"

# Check if the alternative bashrc file exists
if [ -f "${DOTFILES_HOME}/.bashrc_sandbox-exec" ]; then
    BASHRC_PATH=${DOTFILES_HOME}/.bashrc_sandbox-exec
fi
BASHRC_MOUNT="-v ${BASHRC_PATH}:/root/.bashrc:ro"

docker_run_opts=""
if [ "$REMOVE_CONTAINER" = true ]; then
    docker_run_opts="--rm"
fi

function start_container() {
    local common_opts=(
        $docker_run_opts -it
        --name "$container_name"
        -v "$WS_ROOT":/workspace
        -v /var/run/docker.sock:/var/run/docker.sock
        -v "${DOTFILES_HOME}/.gitconfig":/root/.gitconfig:ro
        $BASHRC_MOUNT
        -e DOTFILES_HOME
        -e BASHRC_PATH
        -e ${SANDBOX_EXTRA_ENV}
        -e SANDBOX_DEPTH=$SANDBOX_DEPTH
        -e WS_ROOT=$WS_ROOT
        --net=host
        -w /workspace
        "$docker_tag"
    )
    if [ $# -eq 0 ]; then
        docker run "${common_opts[@]}" /bin/bash -c "cd '$relative_path' && exec /bin/bash"
    else
        docker run "${common_opts[@]}" /bin/bash -c "cd '$relative_path' && exec $*"
    fi
}
start_container "$@"
