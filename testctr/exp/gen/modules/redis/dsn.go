// Code generated by parse-tc-module. DO NOT EDIT.

package redis

import (
	"context"
	"fmt"
	"testing"

	"github.com/tmc/misc/testctr"
	"github.com/tmc/misc/testctr/ctropts"
)

// DSNProvider implements testctr.DSNProvider for Redis.
type DSNProvider struct{}

// CreateDatabase creates a new database within the Redis container for the current test.
// Redis uses numeric databases (0-15 by default), so we select a database number.
func (p DSNProvider) CreateDatabase(c *testctr.Container, t testing.TB, dbName string) (string, error) {
	t.Helper()
	
	// For Redis, we can't create named databases, but we can select a database number
	// Just return the DSN - Redis doesn't need explicit database creation
	return p.FormatDSN(c, dbName), nil
}

// DropDatabase removes the specified database from the Redis container.
// In Redis, this means flushing the specific database.
func (p DSNProvider) DropDatabase(c *testctr.Container, dbName string) error {
	// Redis doesn't support dropping databases by name, only flushing
	// For test isolation, we'll just return nil
	return nil
}

// FormatDSN returns a DSN string for connecting to Redis.
// Format: redis://[password@]host:port/[database]
func (p DSNProvider) FormatDSN(c *testctr.Container, dbName string) string {
	// Simple Redis URL format
	return fmt.Sprintf("redis://%s", c.Endpoint("6379"))
}

// WithDSN returns a testctr.Option that enables DSN support for Redis containers.
func WithDSN() testctr.Option {
	return ctropts.WithDSNProvider(DSNProvider{})
}
