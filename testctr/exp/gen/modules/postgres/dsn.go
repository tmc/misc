// Code generated by parse-tc-module. DO NOT EDIT.

package postgres

import (
	"context"
	"fmt"
	"testing"

	"github.com/tmc/misc/testctr"
	"github.com/tmc/misc/testctr/ctropts"
)

// DSNProvider implements testctr.DSNProvider for PostgreSQL.
type DSNProvider struct{}

// CreateDatabase creates a new database within the PostgreSQL container for the current test.
func (p DSNProvider) CreateDatabase(c *testctr.Container, t testing.TB, dbName string) (string, error) {
	t.Helper()
	
	// Create database using createdb command
	exitCode, output, err := c.Exec(context.Background(), []string{
		"createdb", "-U", "postgres", dbName,
	})
	
	if err != nil {
		return "", fmt.Errorf("failed to create database %s: %w (output: %s)", dbName, err, output)
	}
	if exitCode != 0 && !contains(output, "already exists") {
		return "", fmt.Errorf("createdb command failed (exit code %d): %s", exitCode, output)
	}
	
	return p.FormatDSN(c, dbName), nil
}

// DropDatabase removes the specified database from the PostgreSQL container.
func (p DSNProvider) DropDatabase(c *testctr.Container, dbName string) error {
	_, _, err := c.Exec(context.Background(), []string{
		"dropdb", "-U", "postgres", "--if-exists", dbName,
	})
	return err
}

// FormatDSN returns a DSN string for connecting to the specified database.
func (p DSNProvider) FormatDSN(c *testctr.Container, dbName string) string {
	return fmt.Sprintf("postgresql://postgres:test@%s/%s?sslmode=disable", c.Endpoint("5432"), dbName)
}

// WithDSN returns a testctr.Option that enables DSN support for PostgreSQL containers.
func WithDSN() testctr.Option {
	return ctropts.WithDSNProvider(DSNProvider{})
}

func contains(s, substr string) bool {
	return len(s) >= len(substr) && s[0:len(substr)] == substr || len(s) > len(substr) && contains(s[1:], substr)
}
