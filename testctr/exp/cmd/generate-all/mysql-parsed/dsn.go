// Code generated by parse-tc-module. DO NOT EDIT.

package mysql

import (
	"context"
	"fmt"
	"testing"

	"github.com/tmc/misc/testctr"
	"github.com/tmc/misc/testctr/ctropts"
)

// DSNProvider implements testctr.DSNProvider for MySQL.
type DSNProvider struct{}

// CreateDatabase creates a new database within the MySQL container for the current test.
func (p DSNProvider) CreateDatabase(c *testctr.Container, t testing.TB, dbName string) (string, error) {
	t.Helper()
	
	// Create database using mysql command
	exitCode, output, err := c.Exec(context.Background(), []string{
		"mysql", "-uroot", "-ptest", "-e", fmt.Sprintf("CREATE DATABASE IF NOT EXISTS %s", dbName),
	})
	
	if err != nil {
		return "", fmt.Errorf("failed to create database %s: %w (output: %s)", dbName, err, output)
	}
	if exitCode != 0 {
		return "", fmt.Errorf("mysql command failed (exit code %d): %s", exitCode, output)
	}
	
	return p.FormatDSN(c, dbName), nil
}

// DropDatabase removes the specified database from the MySQL container.
func (p DSNProvider) DropDatabase(c *testctr.Container, dbName string) error {
	_, _, err := c.Exec(context.Background(), []string{
		"mysql", "-uroot", "-ptest", "-e", fmt.Sprintf("DROP DATABASE IF EXISTS %s", dbName),
	})
	return err
}

// FormatDSN returns a DSN string for connecting to the specified database.
func (p DSNProvider) FormatDSN(c *testctr.Container, dbName string) string {
	return fmt.Sprintf("root:test@tcp(%s)/%s", c.Endpoint("3306"), dbName)
}

// WithDSN returns a testctr.Option that enables DSN support for MySQL containers.
func WithDSN() testctr.Option {
	return ctropts.WithDSNProvider(DSNProvider{})
}
