# Test parsing testcontainers modules to generate testctr modules

# First, ensure we have the modules available by trying to download them
exec go mod download github.com/testcontainers/testcontainers-go/modules/mysql@v0.37.0
exec go mod download github.com/testcontainers/testcontainers-go/modules/postgres@v0.37.0
exec go mod download github.com/testcontainers/testcontainers-go/modules/redis@v0.37.0
exec go mod download github.com/testcontainers/testcontainers-go/modules/mongodb@v0.37.0
exec go mod download github.com/testcontainers/testcontainers-go/modules/qdrant@v0.37.0

# Parse MySQL module
parse-tc-module -module mysql -out mysql-parsed
cmp mysql-parsed/mysql.go expected/mysql/mysql.go
cmp mysql-parsed/doc.go expected/mysql/doc.go
cmp mysql-parsed/mysql_test.go expected/mysql/mysql_test.go

# Parse PostgreSQL module
parse-tc-module -module postgres -out postgres-parsed
cmp postgres-parsed/postgres.go expected/postgres/postgres.go
cmp postgres-parsed/doc.go expected/postgres/doc.go
cmp postgres-parsed/postgres_test.go expected/postgres/postgres_test.go

# Parse Redis module
parse-tc-module -module redis -out redis-parsed
cmp redis-parsed/redis.go expected/redis/redis.go
cmp redis-parsed/doc.go expected/redis/doc.go
cmp redis-parsed/redis_test.go expected/redis/redis_test.go

# Parse MongoDB module
parse-tc-module -module mongodb -out mongodb-parsed
cmp mongodb-parsed/mongodb.go expected/mongodb/mongodb.go
cmp mongodb-parsed/doc.go expected/mongodb/doc.go
cmp mongodb-parsed/mongodb_test.go expected/mongodb/mongodb_test.go

# Parse Qdrant module
parse-tc-module -module qdrant -out qdrant-parsed
cmp qdrant-parsed/qdrant.go expected/qdrant/qdrant.go
cmp qdrant-parsed/doc.go expected/qdrant/doc.go
cmp qdrant-parsed/qdrant_test.go expected/qdrant/qdrant_test.go

-- go.mod --
module test

go 1.23

-- expected/mysql/mysql.go --
// Code generated by parse-tc-module. DO NOT EDIT.

package mysql

import (
	"fmt"
	"time"

	"github.com/tmc/misc/testctr"
	"github.com/tmc/misc/testctr/ctropts"
)

// Default returns the default configuration for mysql containers.
func Default() testctr.Option {
	return testctr.Options(
		testctr.WithPort("3306"),
		ctropts.WithWaitForLog("ready for connections", 30*time.Second),
		// TODO: Add DSN provider when fully implemented
	)
}

func WithDefaultCredentials() testctr.Option {
	return testctr.WithEnv("MYSQL_USER", "root")
}

func WithUsername(username string) testctr.Option {
	return testctr.WithEnv("MYSQL_USER", username)
}

func WithPassword(password string) testctr.Option {
	return testctr.WithEnv("MYSQL_PASSWORD", password)
}

func WithDatabase(database string) testctr.Option {
	return testctr.WithEnv("MYSQL_DATABASE", database)
}

func WithConfigFile(configFile string) testctr.Option {
	// TODO: Implement WithConfigFile option 
	return testctr.OptionFunc(func(interface{}) {})
}

func WithScripts(scripts ...string) testctr.Option {
	// TODO: Implement WithScripts option 
	return testctr.OptionFunc(func(interface{}) {})
}

-- expected/mysql/doc.go --
// Code generated by parse-tc-module. DO NOT EDIT.

/*
Package mysql provides testctr support for mysql containers.

This package was generated by parsing testcontainers-go/modules/mysql.

# Default Configuration

Image: mysql:8.0.36
Port: 3306
Exposed Ports: 3306/tcp 33060/tcp 

Environment Variables:
  - MYSQL_USER: test
  - MYSQL_PASSWORD: test
  - MYSQL_DATABASE: test
  - MYSQL_ROOT_PASSWORD: test

Wait Strategies:
  - log: ready for connections

# Usage

	import (
		"testing"
		"github.com/tmc/misc/testctr"
		"github.com/tmc/misc/testctr/exp/gen/modules/mysql"
	)

	func TestWithMysql(t *testing.T) {
		container := testctr.New(t, "mysql:8.0.36", mysql.Default())
		// Use container...
	}

# Configuration Options

## WithDefaultCredentials

Sets default root credentials

Sets environment variable: MYSQL_USER

## WithUsername

Sets the MySQL username

Sets environment variable: MYSQL_USER

## WithPassword

Sets the MySQL password

Sets environment variable: MYSQL_PASSWORD

## WithDatabase

Sets the default database name

Sets environment variable: MYSQL_DATABASE

## WithConfigFile

Mounts a custom MySQL configuration file

## WithScripts

Adds initialization scripts to be executed

*/
package mysql

-- expected/mysql/mysql_test.go --
// Code generated by parse-tc-module. DO NOT EDIT.

package mysql_test

import (
	"testing"

	"github.com/tmc/misc/testctr"
	"github.com/tmc/misc/testctr/exp/gen/modules/mysql"
)

func TestMysqlContainer(t *testing.T) {
	t.Parallel()

	container := testctr.New(t, "mysql:8.0.36", mysql.Default())
	
	if container.ID() == "" {
		t.Fatal("container ID should not be empty")
	}

	port := container.Port()
	if port == "" {
		t.Fatal("container port should not be empty")
	}

	addr := container.Addr("3306")
	if addr == "" {
		t.Fatalf("failed to get address for port 3306")
	}
}

func TestMysqlWithOptions(t *testing.T) {
	t.Parallel()

	container := testctr.New(t, "mysql:8.0.36",
		mysql.Default(),
		// Add custom options here
	)

	if container.ID() == "" {
		t.Fatal("container ID should not be empty")
	}
}

-- expected/postgres/postgres.go --
// Code generated by parse-tc-module. DO NOT EDIT.

package postgres

import (
	"fmt"
	"time"

	"github.com/tmc/misc/testctr"
	"github.com/tmc/misc/testctr/ctropts"
)

// Default returns the default configuration for postgres containers.
func Default() testctr.Option {
	return testctr.Options(
		testctr.WithPort("5432"),
		ctropts.WithWaitForLog("database system is ready to accept connections", 30*time.Second),
		// TODO: Add DSN provider when fully implemented
	)
}

func WithInitScripts(scripts ...string) testctr.Option {
	// TODO: Implement WithInitScripts option 
	return testctr.OptionFunc(func(interface{}) {})
}

func WithInitCommands(cmds ...*exec.Cmd) testctr.Option {
	// TODO: Implement WithInitCommands option 
	return testctr.OptionFunc(func(interface{}) {})
}

func WithDatabase(database string) testctr.Option {
	return testctr.WithEnv("POSTGRES_DB", database)
}

func WithUsername(username string) testctr.Option {
	return testctr.WithEnv("POSTGRES_USER", username)
}

func WithPassword(password string) testctr.Option {
	return testctr.WithEnv("POSTGRES_PASSWORD", password)
}

func WithConfigFile(cfg string) testctr.Option {
	// TODO: Implement WithConfigFile option 
	return testctr.OptionFunc(func(interface{}) {})
}

func WithSQLDriver(driver string) testctr.Option {
	// TODO: Implement WithSQLDriver option 
	return testctr.OptionFunc(func(interface{}) {})
}

func WithSnapshotName(name string) testctr.Option {
	// TODO: Implement WithSnapshotName option 
	return testctr.OptionFunc(func(interface{}) {})
}

func WithDefaultCredentials() testctr.Option {
	return testctr.WithEnv("POSTGRES_USER", "postgres")
}

-- expected/postgres/doc.go --
// Code generated by parse-tc-module. DO NOT EDIT.

/*
Package postgres provides testctr support for postgres containers.

This package was generated by parsing testcontainers-go/modules/postgres.

# Default Configuration

Image: postgres:15-alpine
Port: 5432
Exposed Ports: 5432/tcp 

Environment Variables:
  - POSTGRES_USER: postgres
  - POSTGRES_PASSWORD: postgres
  - POSTGRES_DB: postgres

Wait Strategies:
  - log: database system is ready to accept connections

# Usage

	import (
		"testing"
		"github.com/tmc/misc/testctr"
		"github.com/tmc/misc/testctr/exp/gen/modules/postgres"
	)

	func TestWithPostgres(t *testing.T) {
		container := testctr.New(t, "postgres:15-alpine", postgres.Default())
		// Use container...
	}

# Configuration Options

## WithInitScripts

Adds initialization SQL scripts

## WithInitCommands

Adds initialization commands to run

## WithDatabase

Sets the default database name

Sets environment variable: POSTGRES_DB

## WithUsername

Sets the PostgreSQL username

Sets environment variable: POSTGRES_USER

## WithPassword

Sets the PostgreSQL password

Sets environment variable: POSTGRES_PASSWORD

## WithConfigFile

Mounts a custom PostgreSQL configuration file

## WithSQLDriver

Sets the SQL driver for connections

## WithSnapshotName

Sets a snapshot name for the container

## WithDefaultCredentials

Sets default postgres credentials

Sets environment variable: POSTGRES_USER

*/
package postgres

-- expected/postgres/postgres_test.go --
// Code generated by parse-tc-module. DO NOT EDIT.

package postgres_test

import (
	"testing"

	"github.com/tmc/misc/testctr"
	"github.com/tmc/misc/testctr/exp/gen/modules/postgres"
)

func TestPostgresContainer(t *testing.T) {
	t.Parallel()

	container := testctr.New(t, "postgres:15-alpine", postgres.Default())
	
	if container.ID() == "" {
		t.Fatal("container ID should not be empty")
	}

	port := container.Port()
	if port == "" {
		t.Fatal("container port should not be empty")
	}

	addr := container.Addr("5432")
	if addr == "" {
		t.Fatalf("failed to get address for port 5432")
	}
}

func TestPostgresWithOptions(t *testing.T) {
	t.Parallel()

	container := testctr.New(t, "postgres:15-alpine",
		postgres.Default(),
		// Add custom options here
	)

	if container.ID() == "" {
		t.Fatal("container ID should not be empty")
	}
}

-- expected/redis/redis.go --
// Code generated by parse-tc-module. DO NOT EDIT.

package redis

import (
	"time"

	"github.com/tmc/misc/testctr"
	"github.com/tmc/misc/testctr/ctropts"
)

// Default returns the default configuration for redis containers.
func Default() testctr.Option {
	return testctr.Options(
		testctr.WithPort("6379"),
		ctropts.WithWaitForLog("Ready to accept connections", 30*time.Second),
	)
}

func WithConfigFile(configFile string) testctr.Option {
	// TODO: Implement WithConfigFile option 
	return testctr.OptionFunc(func(interface{}) {})
}

func WithLogLevel(logLevel string) testctr.Option {
	// TODO: Implement WithLogLevel option 
	return testctr.OptionFunc(func(interface{}) {})
}

func WithSnapshotting(_, _ int) testctr.Option {
	// TODO: Implement WithSnapshotting option 
	return testctr.OptionFunc(func(interface{}) {})
}

func WithPassword(password string) testctr.Option {
	return testctr.WithEnv("REDIS_PASSWORD", password)
}

-- expected/redis/doc.go --
// Code generated by parse-tc-module. DO NOT EDIT.

/*
Package redis provides testctr support for redis containers.

This package was generated by parsing testcontainers-go/modules/redis.

# Default Configuration

Image: redis:7-alpine
Port: 6379
Exposed Ports: 6379/tcp 

Wait Strategies:
  - log: Ready to accept connections

# Usage

	import (
		"testing"
		"github.com/tmc/misc/testctr"
		"github.com/tmc/misc/testctr/exp/gen/modules/redis"
	)

	func TestWithRedis(t *testing.T) {
		container := testctr.New(t, "redis:7-alpine", redis.Default())
		// Use container...
	}

# Configuration Options

## WithConfigFile

Mounts a custom Redis configuration file

## WithLogLevel

Sets the Redis log level

## WithSnapshotting

Configures Redis snapshotting

## WithPassword

Sets the Redis password

Sets environment variable: REDIS_PASSWORD

*/
package redis

-- expected/redis/redis_test.go --
// Code generated by parse-tc-module. DO NOT EDIT.

package redis_test

import (
	"testing"

	"github.com/tmc/misc/testctr"
	"github.com/tmc/misc/testctr/exp/gen/modules/redis"
)

func TestRedisContainer(t *testing.T) {
	t.Parallel()

	container := testctr.New(t, "redis:7-alpine", redis.Default())
	
	if container.ID() == "" {
		t.Fatal("container ID should not be empty")
	}

	port := container.Port()
	if port == "" {
		t.Fatal("container port should not be empty")
	}

	addr := container.Addr("6379")
	if addr == "" {
		t.Fatalf("failed to get address for port 6379")
	}
}

func TestRedisWithOptions(t *testing.T) {
	t.Parallel()

	container := testctr.New(t, "redis:7-alpine",
		redis.Default(),
		// Add custom options here
	)

	if container.ID() == "" {
		t.Fatal("container ID should not be empty")
	}
}

-- expected/mongodb/mongodb.go --
// Code generated by parse-tc-module. DO NOT EDIT.

package mongodb

import (
	"fmt"
	"time"

	"github.com/tmc/misc/testctr"
	"github.com/tmc/misc/testctr/ctropts"
)

// Default returns the default configuration for mongodb containers.
func Default() testctr.Option {
	return testctr.Options(
		testctr.WithPort("27017"),
		ctropts.WithWaitForLog("Waiting for connections", 30*time.Second),
		// TODO: Add DSN provider when fully implemented
	)
}

func WithReplicaSet(name string) testctr.Option {
	return testctr.WithEnv("MONGO_REPLICA_SET", name)
}

func WithUsername(username string) testctr.Option {
	return testctr.WithEnv("MONGO_INITDB_ROOT_USERNAME", username)
}

func WithPassword(password string) testctr.Option {
	return testctr.WithEnv("MONGO_INITDB_ROOT_PASSWORD", password)
}

-- expected/mongodb/doc.go --
// Code generated by parse-tc-module. DO NOT EDIT.

/*
Package mongodb provides testctr support for mongodb containers.

This package was generated by parsing testcontainers-go/modules/mongodb.

# Default Configuration

Image: mongo:7
Port: 27017
Exposed Ports: 27017/tcp 

Environment Variables:
  - MONGO_INITDB_ROOT_USERNAME: root
  - MONGO_INITDB_ROOT_PASSWORD: example

Wait Strategies:
  - log: Waiting for connections

# Usage

	import (
		"testing"
		"github.com/tmc/misc/testctr"
		"github.com/tmc/misc/testctr/exp/gen/modules/mongodb"
	)

	func TestWithMongodb(t *testing.T) {
		container := testctr.New(t, "mongo:7", mongodb.Default())
		// Use container...
	}

# Configuration Options

## WithReplicaSet

Configures MongoDB replica set

Sets environment variable: MONGO_REPLICA_SET

## WithUsername

Sets the MongoDB root username

Sets environment variable: MONGO_INITDB_ROOT_USERNAME

## WithPassword

Sets the MongoDB root password

Sets environment variable: MONGO_INITDB_ROOT_PASSWORD

*/
package mongodb

-- expected/mongodb/mongodb_test.go --
// Code generated by parse-tc-module. DO NOT EDIT.

package mongodb_test

import (
	"testing"

	"github.com/tmc/misc/testctr"
	"github.com/tmc/misc/testctr/exp/gen/modules/mongodb"
)

func TestMongodbContainer(t *testing.T) {
	t.Parallel()

	container := testctr.New(t, "mongo:7", mongodb.Default())
	
	if container.ID() == "" {
		t.Fatal("container ID should not be empty")
	}

	port := container.Port()
	if port == "" {
		t.Fatal("container port should not be empty")
	}

	addr := container.Addr("27017")
	if addr == "" {
		t.Fatalf("failed to get address for port 27017")
	}
}

func TestMongodbWithOptions(t *testing.T) {
	t.Parallel()

	container := testctr.New(t, "mongo:7",
		mongodb.Default(),
		// Add custom options here
	)

	if container.ID() == "" {
		t.Fatal("container ID should not be empty")
	}
}

-- expected/qdrant/qdrant.go --
// Code generated by parse-tc-module. DO NOT EDIT.

package qdrant

import (
	"time"

	"github.com/tmc/misc/testctr"
	"github.com/tmc/misc/testctr/ctropts"
)

// Default returns the default configuration for qdrant containers.
func Default() testctr.Option {
	return testctr.Options(
		testctr.WithPort("6333"),
		ctropts.WithWaitForLog("Qdrant is ready", 30*time.Second),
	)
}

-- expected/qdrant/doc.go --
// Code generated by parse-tc-module. DO NOT EDIT.

/*
Package qdrant provides testctr support for qdrant containers.

This package was generated by parsing testcontainers-go/modules/qdrant.

# Default Configuration

Image: qdrant/qdrant:v1.7.4
Port: 6333
Exposed Ports: 6333/tcp 6334/tcp 

Wait Strategies:
  - log: Qdrant is ready

# Usage

	import (
		"testing"
		"github.com/tmc/misc/testctr"
		"github.com/tmc/misc/testctr/exp/gen/modules/qdrant"
	)

	func TestWithQdrant(t *testing.T) {
		container := testctr.New(t, "qdrant/qdrant:v1.7.4", qdrant.Default())
		// Use container...
	}

*/
package qdrant

-- expected/qdrant/qdrant_test.go --
// Code generated by parse-tc-module. DO NOT EDIT.

package qdrant_test

import (
	"testing"

	"github.com/tmc/misc/testctr"
	"github.com/tmc/misc/testctr/exp/gen/modules/qdrant"
)

func TestQdrantContainer(t *testing.T) {
	t.Parallel()

	container := testctr.New(t, "qdrant/qdrant:v1.7.4", qdrant.Default())
	
	if container.ID() == "" {
		t.Fatal("container ID should not be empty")
	}

	port := container.Port()
	if port == "" {
		t.Fatal("container port should not be empty")
	}

	addr := container.Addr("6333")
	if addr == "" {
		t.Fatalf("failed to get address for port 6333")
	}
}