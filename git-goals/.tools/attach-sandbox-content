#!/bin/bash
# attach-sandbox-context - Attaches bash history and docker logs from the latest sandbox to a git commit

set -euo pipefail

NAMESPACE="sandbox-exec"
GIT_REF="HEAD"
REPLACE=false

usage() {
    echo "Usage: attach-sandbox-content [-n|--namespace NAME] [-h|--help] [-c|--commit-hash] [-r|--replace] [GIT_REF]" >&2
    echo "Options:"
    echo "  -n, --namespace NAME    Use a custom namespace for git notes (default: sandbox-exec)"
    echo "  -c, --commit-hash       Specify the commit hash to attach the sandbox context to (default: HEAD)"
    echo "  -r, --replace           Replace existing sandbox context notes"
    echo "  -h, --help              Show this help message"

    exit 1
}

while getopts ":n:hc:r-:" opt; do
    case $opt in
        n)
            NAMESPACE="$OPTARG"
            ;;
        h)
            usage
            ;;
        c)
            GIT_REF="$OPTARG"
            ;;
        r)
            REPLACE=true
            ;;
        -)
            case "${OPTARG}" in
                namespace)
                    NAMESPACE="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                    ;;
                help)
                    usage
                    ;;
                *)
                    echo "Invalid option: --${OPTARG}" >&2
                    exit 1
                    ;;
            esac
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit 1
            ;;
    esac
done

# Get the latest sandbox container
# get path relative to this script:
dir=$(dirname -- "$( readlink -f -- "$0"; )")
latest_sandbox=$(${dir}/get-latest-sandbox -n "$NAMESPACE") || { echo "Error: Failed to get latest sandbox" >&2; exit 1; }

if [ -z "$latest_sandbox" ]; then
    echo "No sandbox container found." >&2
    exit 1
fi

echo "Latest sandbox container: $latest_sandbox"

# Create temporary files
temp_history=$(mktemp)
temp_logs=$(mktemp)

# Function to clean up temporary files
cleanup() {
    rm -f "$temp_history" "$temp_logs"
}

# Set up trap to clean up temporary files on exit
trap cleanup EXIT

# Copy bash history from the container
if ! docker cp "$latest_sandbox:/root/.bash_history" "$temp_history" 2>/dev/null; then
    echo "Warning: Could not copy bash history from container. It might not exist or be empty." >&2
fi

# Get docker logs
if ! docker logs "$latest_sandbox" > "$temp_logs" 2>&1; then
    echo "Warning: Could not retrieve docker logs. The container might not exist anymore." >&2
fi

# Get the current commit hash
target_commit=$(git rev-parse --short "$GIT_REF")

# Attach bash history to the current commit
if [ -s "$temp_history" ]; then
    if [ "$REPLACE" = true ]; then
        git notes --ref="$NAMESPACE-history" add -f -F "$temp_history" "$target_commit"
    else 
        git notes --ref="$NAMESPACE-history" append -F "$temp_history" "$target_commit"
    fi
fi

# Attach docker logs to the current commit
if [ -s "$temp_logs" ]; then
    if [ "$REPLACE" = true ]; then
        git notes --ref="$NAMESPACE-logs" add -f -F "$temp_logs" "$target_commit"
    else
        git notes --ref="$NAMESPACE-logs" append -F "$temp_logs" "$target_commit"
    fi
fi
