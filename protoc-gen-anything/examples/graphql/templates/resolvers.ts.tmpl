// GENERATION_BEHAVIOR: overwrite
/**
 * GraphQL resolvers generated from Protocol Buffers
 * DO NOT EDIT - Generated by protoc-gen-anything
 */

import { GraphQLResolveInfo } from 'graphql';
import { BlogService } from '../services/blog.service';

// Resolver context
export interface Context {
  blogService: BlogService;
}

// Base resolver type
export type Resolver<R = unknown, P = {}, C = Context> = 
  (parent: P, args: any, context: C, info: GraphQLResolveInfo) => Promise<R> | R;

// Resolvers by type
export interface Resolvers {
  Query: QueryResolvers;
  Mutation: MutationResolvers;
  {{ range .File.Messages }}
  {{- if not (messageExtension . "graphql.options.skip") }}
  {{- if not (messageExtension . "graphql.options.input_type") }}
  {{ .GoIdent.GoName }}: {{ .GoIdent.GoName }}Resolvers;
  {{- end }}
  {{- end }}
  {{ end }}
}

// Query resolvers
export interface QueryResolvers {
{{- range .File.Services }}
{{- $service := . }}
{{- range .Methods }}
{{- if hasPrefix "Get" .GoName | or (hasPrefix "List" .GoName) }}
  {{ lowerFirst .GoName }}: Resolver<{{ graphqlTsType .Output }}, any, Context>;
{{- end }}
{{- end }}
{{- end }}
}

// Mutation resolvers
export interface MutationResolvers {
{{- range .File.Services }}
{{- $service := . }}
{{- range .Methods }}
{{- if not (or (hasPrefix "Get" .GoName) (hasPrefix "List" .GoName)) }}
  {{ lowerFirst .GoName }}: Resolver<{{ graphqlTsType .Output }}, any, Context>;
{{- end }}
{{- end }}
{{- end }}
}

{{ range .File.Messages }}
{{- if not (messageExtension . "graphql.options.skip") }}
{{- if not (messageExtension . "graphql.options.input_type") }}
// {{ .GoIdent.GoName }} resolvers
export interface {{ .GoIdent.GoName }}Resolvers {
{{- range .Fields }}
{{- if not (fieldExtension . "graphql.options.skip") }}
{{- if isComplexField . }}
  {{ lowerFirst .GoName }}: Resolver<{{ graphqlTsType . }}, {{ $.GoIdent.GoName }}, Context>;
{{- end }}
{{- end }}
{{- end }}
}
{{ end }}
{{ end }}
{{ end }}

// Default resolvers implementation
export const resolvers: Resolvers = {
  Query: {
  {{- range .File.Services }}
  {{- $service := . }}
  {{- range .Methods }}
  {{- if hasPrefix "Get" .GoName | or (hasPrefix "List" .GoName) }}
    {{ lowerFirst .GoName }}: async (_, args, { blogService }) => {
      return blogService.{{ lowerFirst .GoName }}(args);
    },
  {{- end }}
  {{- end }}
  {{- end }}
  },
  
  Mutation: {
  {{- range .File.Services }}
  {{- $service := . }}
  {{- range .Methods }}
  {{- if not (or (hasPrefix "Get" .GoName) (hasPrefix "List" .GoName)) }}
    {{ lowerFirst .GoName }}: async (_, args, { blogService }) => {
      return blogService.{{ lowerFirst .GoName }}(args);
    },
  {{- end }}
  {{- end }}
  {{- end }}
  },
  
  {{ range .File.Messages }}
  {{- if not (messageExtension . "graphql.options.skip") }}
  {{- if not (messageExtension . "graphql.options.input_type") }}
  {{ .GoIdent.GoName }}: {
  {{- range .Fields }}
  {{- if not (fieldExtension . "graphql.options.skip") }}
  {{- if isComplexField . }}
    {{ lowerFirst .GoName }}: async (parent, _, { blogService }) => {
      // Implementation depends on the field type
      {{- if isMessageField . }}
      return blogService.get{{ fieldMessageType . }}(parent.{{ lowerFirst .GoName }}Id);
      {{- else if isRepeatedMessageField . }}
      return blogService.list{{ fieldMessageType . }}sByParentId(parent.id);
      {{- else }}
      return parent.{{ lowerFirst .GoName }};
      {{- end }}
    },
  {{- end }}
  {{- end }}
  {{- end }}
  },
  {{ end }}
  {{ end }}
  {{ end }}
};